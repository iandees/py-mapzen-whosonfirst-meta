#!/usr/bin/env python
# -*-python-*-

"""
./scripts/wof-update-meta -m /usr/local/mapzen/whosonfirst-data/meta/wof-microhood-latest.csv /usr/local/mapzen/whosonfirst-data/data/102/147/445/102147445.geojson
"""

import os
import sys
import logging
import csv

import geojson
import atomicwrites

import mapzen.whosonfirst.meta

if __name__ == '__main__':

   import optparse
   opt_parser = optparse.OptionParser()

   opt_parser.add_option('-m', '--meta', dest='meta', action='store', default=None, help='The path to the meta file you want to update')
   opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
   options, args = opt_parser.parse_args()
   
   if options.verbose:	
      logging.basicConfig(level=logging.DEBUG)
   else:
      logging.basicConfig(level=logging.INFO)
      
   meta = os.path.abspath(options.meta)

   if not os.path.exists(meta):
      logging.error("meta file (%s) does not exist" % meta)
      sys.exit()

   # I don't love this... (20151110/thisisaaronland)

   features = {}

   for path in args:

      path = os.path.abspath(path)

      # See what's going on here - it is possible and likely
      # and just generally more better that we can and will
      # simply parse the filename and extract the ID accordingly
      # (20151110/thisisaaronland)

      fh = open(path, 'r')
      feature = geojson.load(fh)
      props = feature['properties']
      wofid = props['wof:id']
      
      features[wofid] = path

   #

   old_fh = open(meta, 'r')
   reader = csv.DictReader(old_fh)

   writer = None

   with atomicwrites.atomic_write(meta, overwrite=True) as new_fh:

      for row in reader:

         id = row['id']
         id = int(id)

         if features.get(id, False):

            logging.info("update %s" % id)

            path = features[id]
            row = mapzen.whosonfirst.meta.dump_file(path)

         if not writer:
            writer = csv.DictWriter(new_fh, fieldnames=row.keys())
            writer.writeheader()

         writer.writerow(row)
